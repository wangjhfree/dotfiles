
# 编码发展史

[计算机编码总结的参考](http://www.cnblogs.com/jessonluo/p/4800331.html)

1 byte(字节) = 8 bit(比特，二进制位100011代表6bit)

## 第一阶段 ASCII

```
原因：计算机识别的数据只能是0和1（高低电频表示0和1）

(美帝)解决方式：把一个特定的数字对应一个特定的字母进行存储和传输
例：存储字母a，如果存入一个数字97(即在计算机中存入二进制(01100001)，这个过程叫做编码(encode))，而在读取数据的时候，当遇到97时，就让计算机显示字母a，这个过程叫做解码(decode)。

产生：ASCII码表

规则：
* 所有的控制字符(比如CR回车、DEL删除等)编码在0-31范围以及127中；
* 把所有的标点符号，英文大小写全部放在32-126范围中；
* 128-255其他字符。

大小：一个英文字母(字符)占一个字节，一个中文汉字占两个字节的空间

语法：所有ASCII码的统一形式为0xxxx xxxx
```

## 第二阶段 GB2312,GBK, BIG5 Latin1, ISO-8859-1, JIS, ANSI...

```
(欧洲)解决方式：
* 0-127的所有位置不动，那么可以兼容ASCII，二进制位0xxx xxxx
* 128-255位置全部用完，二进制位1xxx xxxx
* 由于所有的位置全部用完，而欧元符号实在指定标准之后才出现的，所以在这个码表中连欧洲人自己的货币符号都没有办法放进去。

产生：Latin1 > 基于ISO标准发展 > ISO-8859-1

规则：
* 128-159之间为控制字符，160-255位文字符号，其中包括了西欧语言、希腊语、泰语、阿拉伯语、希伯来语。
```

```
(中国)解决方式：
* 2个字节代表中文

产生：GB2312
这个码表中包含汉字6763个和非汉字图形字符682个。
还有很多的空间没有用到，索性全部预留了吧。

规则：
* 如果一个字节中第一位为0，那么这就是一个ASCII字符。
* 如果一个字节中第一位为1，那么这个是汉字，认定需要2个字节才表示一个编码的文字。

实现方式：
* 0xxxxxxx：表示为ASCII字符
* -1xxxxxxx 1xxxxxxx：表示为汉字

>>进一步产生：GBK（其他不常用的字符）
>>再进一步产生：GB18030（2\4位混编）

ANSI编码（MBCS（Muilti-Bytes Charecter Set，多字节字符集）：使用 2 个字节来代表一个字符的各种汉字延伸编码方式。
中文，GB2312 ； 日文，JIS ； 不同ANSI编码之间互不兼容 。
```

## 第三阶段 Unicode

```
Unicode(万国码)是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案.

Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位；码位就是可以分配给字符的数字。

Unicode的几种实现：UTF-8、UTF-16、UTF-32、UCS-2、UCS-4
```

> python 里的string和unicode

python2.7和python3.0的处理不同:
[版本](http://www.techug.com/the-difference-of-python2-and-python3)

Unicode和字符转换

```
>>> ord('A')
65
>>> chr(65)
'A'

注意: 2.7不能转换中文，3.0可以
>>> ord('中') 
20013
>>> chr(20013)
'中'

```

